// BGG plays data:
// https://boardgamegeek.com/xmlapi2/plays?username=briankoser&mindate=2016-01-01&maxdate=2016-12-31&page=1

// Convert XML to JSON:
// http://www.utilities-online.info/xmltojson/



/*
    File I/O
*/
var fs = require('fs')

var filePathIn = 'games-played-2016-raw.json'
var filePathOut = 'games-played-2016.json'



/*
    Methods
*/
var getTotalPlayed = function (data) {
    return data.reduce((previous, current) => (Number.parseInt(previous['-quantity']) || previous) + Number.parseInt(current['-quantity']))
}

var getMinutesPlayed = function (data) {
    return data.reduce((previous, current) => (Number.parseInt(previous['-length']) || previous) + Number.parseInt(current['-length']))
}

var getLengths = function (data) {
    return data.map(o => o['-length'])
}

var getLongest = function (data, longestDuration) {
    return data.find(o => o['-length'] == longestDuration)
}

var getShortest = function (data, shortestDuration) {
    return data.find(o => o['-length'] == shortestDuration)
}

var getPlayedByMonth = function (data) {
    const months = data.map(o => new Date(`${o['-date']} 00:00:00`).getMonth())
    var monthCounts = Array(12).fill(0)
    for (var i = 0; i < months.length; i++) {
        monthCounts[months[i]] += 1
    }
    
    var playedByMonth = {}
    playedByMonth.labels = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
    playedByMonth.series = [monthCounts]
    
    return playedByMonth
}

var getPlayedByDay = function (data) {
    const days = data.map(o => new Date(`${o['-date']} 00:00:00`).getDay())
    var dayCounts = Array(7).fill(0)
    for (var i = 0; i < days.length; i++) {
        dayCounts[days[i]] += 1
    }
    
    var playedByDay = {}
    playedByDay.labels = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
    playedByDay.series = [dayCounts]

    return playedByDay
}

var getPlayedByPlayerCount = function (data) {
    const playerCounts = data.map(o => o.players.player.length)
    const labels = playerCounts.filter((v, i, a) => a.indexOf(v) === i).sort((a, b) => a - b)
    var playerCountCounts = Array(Math.max(...labels) + 1).fill(0)
    for (var i = 0; i < playerCounts.length; i++) {
        playerCountCounts[playerCounts[i]] += 1
    }

    var playedByPlayerCount = {}
    playedByPlayerCount.labels = labels
    playedByPlayerCount.series = [playerCountCounts.filter(Boolean)]

    return playedByPlayerCount
}

var getListedByTotalPlayed = function (data) {
    var games = data.map(o => o.item['-name'])
    var gamesMap = new Map([...new Set(games)].map(
        x => [x, games.filter(y => y === x).length]
    ));
    var gamesArray = new Array(...gamesMap)
    var gamesArraySorted = new Map(gamesArray.sort( (a,b) => b[1] - a[1]))

    var listedByTotalPlayed = {}
    listedByTotalPlayed.labels = new Array(...gamesArraySorted.keys())
    listedByTotalPlayed.series = [ new Array(...gamesArraySorted.values()) ]

    return listedByTotalPlayed
}

var getListedByMinutes = function (data) {
    var games = data.map(o => [o.item['-name'], parseInt(o['-length'])])
    var gamesMap = new Map()
    games.forEach(game => {
        if (!gamesMap.has(game[0])) {
            gamesMap.set(game[0], 0)
        }

        gamesMap.set(game[0], gamesMap.get(game[0]) + game[1])
    })
    var gamesArray = new Array(...gamesMap)
    var gamesArraySorted = new Map(gamesArray.sort( (a,b) => b[1] - a[1]))

    var listedByMinutes = {}
    listedByMinutes.labels = new Array(...gamesArraySorted.keys())
    listedByMinutes.series = [ new Array(...gamesArraySorted.values()) ]

    return listedByMinutes
}



/*
    Main
*/
var generateGraphData = function (raw) {
    var data = {}

    data['total-played'] = getTotalPlayed(raw)
    data['minutes-played'] = getMinutesPlayed(raw)

    const lengths = getLengths(raw)

    const longestDuration = Math.max(...lengths)
    data.longest = getLongest(raw, longestDuration)

    const shortestDuration = Math.min(...lengths)
    data.shortest = getShortest(raw, shortestDuration)

    data.hindex = 11 // generated by BGG app

    data.unplayedOwned = 0 // count manually

    data['played-by-month'] = getPlayedByMonth(raw)
    data['played-by-day'] = getPlayedByDay(raw)
    data['played-by-player-count'] = getPlayedByPlayerCount(raw)
    data['listed-by-total-played'] = getListedByTotalPlayed(raw)
    data['listed-by-minutes'] = getListedByMinutes(raw)

    return data
}

var data = JSON.parse(fs.readFileSync(filePathIn, 'utf-8'))
var graphData = generateGraphData(data.plays.play)
fs.writeFileSync(filePathOut, JSON.stringify(graphData))